앞서 설명한 cv2.threshold()함수를 이용한 global thresholding 방법은 이미지 전반에 걸쳐 적용되는 하나의 문턱값을 활용한 로직을 사용했습니다. 이런 방법은 이미지의 각부분의 광원 조건에 따라 이미지 프로세싱을 함에 있어 효과적인 방법이 아닐 수도 있습니다.




Adaptive Thresholding은 이미지의 서로 다른 작은 영역에 적용되는 문턱값을 계산하고 이를 이미지에 적용함으로써 보다 나은 결과를 도출하는데 사용되는 방법입니다.




이 기능을 제공하는 함수는 cv2.adaptiveThreshold() 함수이며, 함수의 인자는 아래와 같습니다.




cv2.adaptiveThreshold(img, value, adaptiveMethod, thresholdType, blocksize, C)

img: Grayscale 이미지
value: adaptiveMethod에 의해 계산된 문턱값과 thresholdType에 의해 픽셀에 적용될 최대값
adaptiveMethod: 사용할 Adaptive Thresholding 알고리즘
cv2.ADAPTIVE_THRESH_MEAN_C: 적용할 픽셀 (x,y)를 중심으로 하는 blocksize x blocksize 안에 있는 픽셀값의 평균에서 C를 뺀 값을 문턱값으로 함
cv2.ADAPTIVE_THRESH_GAUSSIAN_C: 적용할 픽셀 (x,y)를 중심으로 하는 blocksize x blocksize안에 있는 Gaussian 윈도우 기반 가중치들의 합에서 C를 뺀 값을 문턱값으로 함
blocksize: 픽셀에 적용할 문턱값을 계산하기 위한 블럭 크기. 적용될 픽셀이 블럭의 중심이 됨. 따라서 blocksize는 홀수여야 함
C: 보정 상수로, 이 값이 양수이면 계산된 adaptive 문턱값에서 빼고, 음수면 더해줌. 0이면 그대로..



먼저, 이미지의 각 부분이 광원 조건이 다른 사진을 한장 구해서 살펴보도록 하겠습니다~ 


위 코드에서 thr1은 THRESH_BINARY 모드로 thresholding 한 이미지이며, thr2와 thr3는 각각 

ADAPTIVE_THRESH_MEAN_C, ADAPTIVE_THRESH_GAUSSIAN_C를 적용한 이미지입니다.


위 화면을 보면 알 수 있듯이, 전역값을 활용하여 thresholding 한 결과는 원본 이미지를 거의 망치는 수준으로 됩니다.

Adaptive Thresholding은 적절한 인자를 적용하면 노이즈를 최소화하면서 정련된 이미지를 추출할 수 있습니다.
