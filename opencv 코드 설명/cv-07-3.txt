만약 b, g, r을 화면에 디스플레이 하면 어떨까요? 

위 코드 실행 결과에서 보듯이 b, g, r 의 값은 당연히 1채널 값으로 되어 있죠. 여러분께서도 예상했듯이 모두 흑백 이미지로 디스플레이 됩니다. 흑백 이미지는 0 ~ 255 사이의 gray scale 값으로 이미지를 표현하는 것이니까요~

cv2.split()함수와는 반대로 cv2.merge() 함수를 이용하면 B, G, R로 분리된 채널을 합쳐서 컬러 이미지로 만들 수 있습니다.




>>> merged_img = cv2.merge((b, g, r))

>>> cv2.imshow('merged', merged_img)




위 코드에서 merged_img는 원본 이미지와 동일한 컬러 이미지로 디스플레이 될 겁니다.




여기서 유의해야 할 점은 cv2.split() 함수는 성능면에서 효율적인 함수는 아닙니다. 따라서 꼭 필요한 경우에만 cv2.split() 함수를 활용하세요. 이 함수보다 효율적인 방법은 Numpy 인덱싱을 활용하는 것입니다.




>>> b = img[:,:,0]

>>> g = img[:,:,1]

>>> r = img[:,:, 2]




만약 어떤 이미지의 모든 픽셀의 RED 값을 0으로 만들고자 할 때는 아래의 코드를 적용하면 됩니다.




>>> img[:,:,2] = 0

