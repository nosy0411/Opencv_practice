>>> cap = cv2.VideoCapture(0)




먼저, 비디오 캡쳐를 위해 VideoCapture 객체를 생성해야 합니다. VideoCapture의 인자로는 장치 인덱스 또는 비디오파일 이름을 지정합니다. 장치 인덱스는 어떤 카메라를 지정할 것인지에 대한 숫자입니다. 여러분의 PC에 웹캠이 하나만 부착되어 있으면 0을 지정하면 됩니다. 2개 이상이 달려 있는 경우에는 첫번째 웹켐은 0, 두번째 웹캠은 1 등으로 지정하면 됩니다.




또한 저장되어 있는 비디오파일을 재생하려면 재생하려는 비디오파일 경로와 함께 비디오파일 이름을 지정하면 됩니다.

ex) cap = cv2.VideoCapture('video.mp4')







>>> while True:




라이브로 들어오는 비디오를 프레임별로 캡쳐하고 이를 화면에 디스플레이 해주어야 하므로, 특정 키를 누를때까지 무한 루프를 돌립니다.







>>> ret, frame = cap.read()




cap.read()는 재생되는 비디오의 한 프레임씩 읽습니다. 비디오 프레임을 제대로 읽었다면 ret 값이 True가 되고, 실패하면 False가 됩니다. 필요한 경우, ret 값을 체크하여 비디오 프레임을 제대로 읽었는지 확인할 수 있습니다. 읽은 프레임은 frame 입니다.




가끔 cap이 제대로 초기화되지 않을 수도 있는데 이를 경우 에러코드를 리턴합니다. 이 때 cap.isOpened() 함수를 이용해 cap이 초기화가 제대로 되었는지 확인할 수 있습니다. 만약 cap.isOpened()가 False이면 cap.open() 함수를 이용해 오픈하면 됩니다.







>>> gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)




frame을 흑백으로 변환합니다.







>>> cv2.imshow('frame', gray)




흑백으로 변환한 프레임을 화면에 디스플레이 합니다. 비디오는 프레임을 시간에 따라 연속적으로 화면에 보여주는 것이므로, 하나의 프레임은 하나의 이미지입니다. 따라서 이미지를 화면에 디스플레이하는 함수인 cv2.imshow()를 그대로 사용합니다.




위 코드는 ESC 키를 누르면 프로그램이 종료됩니다.







>>> cap.release()

>>> cv2.destroyAllWindows()




마지막으로 오픈한 cap 객체를 cap.release() 함수를 이용해 반드시 해제합니다. 그리고 생성한 모든 윈도우를 제거합니다.




위 예제 코드에는 적용되어 있지 않지만, 필요시 cap.get() 함수를 이용하면 비디오와 관련된 다양한 속성값을 취할 수 있습니다. cap.get()함수의 인자는 비디오 속성값 ID이며 숫자로 0~18까지 입니다.




이에 대한 자세한 내용은 Property Identifier 를 참고하세요




만약 비디오 프레임의 폭과 높이를 알고 싶다면, cap.get(3), cap.get(4)의 값을 확인하면 됩니다. 만약 새로운 폭과 높이로 설정하기 원한다면 cap.set()함수로 설정하면 됩니다. 예를 들어 프레임의 크기를 320x240 으로 설정하고 싶다면




ret = cap.set(3, 320)

ret = cap.set(4, 240)




으로 하면 됩니다. 




위 코드를 실행해 보면 웹캠이 동작하면서 흑백 영상이 화면에 디스플레이 될 겁니다.
