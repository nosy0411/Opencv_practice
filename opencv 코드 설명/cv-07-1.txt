이번 강좌에서 다루어 볼 내용은 다음과 같습니다.

이미지의 임의의 픽셀 값을 취하여 그 값을 수정하기
이미지 속성 얻기
이미지 영역(Region Of Image: ROI) 설정하기
이미지 채널을 분할하고 합치기






이미지 픽셀 값 얻고 수정하기

한장의 이미지는 지정된 크기의 BGR 값들의 배열입니다. 예를 들어 10 x 10 크기의 이미지는 가로 10개, 세로 10개의 픽셀들의 행렬이고, 각 픽셀들은 (B, G, R) 값을 가지고 있습니다. 여기서 B, G, R은 각각 0~255 사이의 정수가 되는 것이구요..

만약 어떤 이미지를 읽고 특정 위치의 픽셀값을 얻으면 (B, G, R)의 값으로 나타납니다.




여태까지 우리는 이미지를 읽어 들일 때 Numpy array로 변경해서 다루었습니다. 

img = cv2.imread(..) 는 이미지를 읽은 후 Numpy array 형식으로 img에 담습니다. img는 곧 Numpy array 인 거죠.

위 코드는 images 폴더에 있는 hallstatt.jpg 파일을 읽어, (340, 200) 위치의 픽셀값을 출력하는 코드입니다.

이미지에 따라서 다르겠지만 출력값은 [195, 133, 95]와 같이 표시됩니다. 이는 hallstatt.jpg의 (340, 200)위치에 있는 픽셀은 Blue = 195, Green = 133, Red = 95 인 색상입니다를 의미합니다.




만약 이 픽셀을 검정색으로 바꾸고 싶다면 아래의 코드를 적용하면 됩니다.




>>> img[340, 200] = [0, 0, 0]




또는 B, G, R 값을 개별적으로 변경할 수 있는데, img[340, 200, 0]은 B값을, img[340, 200, 1]은 G값, img[340, 200, 2]는 R 값입니다. 모든 픽셀에 대해 이와 동일한 규칙으로 적용됩니다.




하지만 위 코드는 개개의 픽셀 작업을 수행하는데 있어 성능상 문제가 있을 수 있습니다. Numpy는 이러한 계산에 최적화된 알고리즘을 적용하였으므로 개별적인 픽셀에 접근하여 그 값을 변경하려면 아래의 방법을 사용하는 것이 더 낫습니다.







>>> B = img.item(340, 200, 0)

>>> G = img.item(340, 200, 1)

>>> R = img.item(340, 200, 2)




Numpy array의 item() 함수는 개별적인 픽셀에 접근할 수 있지만, B, G, R 개별적으로 접근해야 합니다.

만약 (340, 200) 위치의 픽셀값을 변경하려면 img.itemset() 함수를 이용하면 되고, 이 역시 B, G, R 개별적인 값을 변경해주어야 합니다.




(340, 200) 위치의 픽셀의 Blue 값을 100으로 변경하는 코드는 아래와 같습니다.




>>> img.itemset((340, 200, 0), 100)







이미지 속성 얻기

이미지 속성을 얻기 위해서는 Numpy array의 아래와 같은 값들에 접근하면 됩니다.

img.shape: 이미지 해상도 및 컬러 채널 (이미지 height, 이미지 width, 컬러 채널수)
img.size: 이미지 사이즈(바이트)
img.dtype: 이미지 데이터 타입.
